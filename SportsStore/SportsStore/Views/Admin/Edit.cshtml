@model SportsStore.Models.Entities.Product

@{
    ViewBag.Title = "Admin: изменение" + Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>Изменения @Model.Name</h2>
@using (Html.BeginForm("Edit", "Admin")) //Явно указываем куда отправлять данные формы
{
    @Html.EditorForModel();
    <input type="submit" value="Сохранить">
    @Html.ActionLink("Отменить изменения", "List")
}


@*      Метод Html.EditorForModel. Этот метод сообщает MVC Framework создать интерфейс
    редактирования, для чего она проверит тип модели, в данном случае, класс Product.

        Давайте будем честными - метод EditorForModel удобен, но дает не самые привлекательные
    результаты. К тому же, мы не хотим, чтобы администратор мог видеть или редактировать атрибут
    ProductID, а текстовое поле для свойства Description слишком мало.

        Мы можем дать MVC Framework указания касательно того, как создавать редакторы для свойств, с
    помощью метаданных модели. Это позволит нам применять атрибуты к свойствам нового класса
    модели, которые повлияют на вывод метода Html.EditorForModel. Для этого к классе Product нам нужно будет добавить новые атрибуты*@